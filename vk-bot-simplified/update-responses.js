/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
 */

const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ JSON
const responsesPath = path.join(__dirname, 'responses.json');
const responses = JSON.parse(fs.readFileSync(responsesPath, 'utf8'));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
function generateResponsesCode() {
  let code = '// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞\n';
  code += '// –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ update-responses.js\n\n';
  
  code += 'const intentResponses = {\n';
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã
  Object.entries(responses.intents).forEach(([key, value]) => {
    const intentKey = key === 'greeting' ? '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' :
                     key === 'events' ? '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' :
                     key === 'circles' ? '–∫—Ä—É–∂–∫–∏' :
                     key === 'contacts' ? '–∫–æ–Ω—Ç–∞–∫—Ç—ã' :
                     key === 'ai_helper' ? 'ai_helper' : key;
    
    code += `  '${intentKey}': \`${value.text}\`,\n`;
  });
  
  code += '};\n\n';
  
  // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  code += 'const systemMessages = {\n';
  Object.entries(responses.system_messages).forEach(([key, value]) => {
    code += `  '${key}': \`${value.text}\`,\n`;
  });
  code += '};\n\n';
  
  // AI Fallback –æ—Ç–≤–µ—Ç—ã
  code += 'const aiFallbackResponses = {\n';
  Object.entries(responses.ai_fallback).forEach(([key, value]) => {
    code += `  '${key}': \`${value.text}\`,\n`;
  });
  code += '};\n\n';
  
  // –≠–∫—Å–ø–æ—Ä—Ç
  code += 'module.exports = {\n';
  code += '  intentResponses,\n';
  code += '  systemMessages,\n';
  code += '  aiFallbackResponses\n';
  code += '};\n';
  
  return code;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function updateMainFile() {
  const indexPath = path.join(__dirname, 'index.js');
  let content = fs.readFileSync(indexPath, 'utf8');
  
  // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
  const startMarker = '// –û—Ç–≤–µ—Ç—ã –Ω–∞ –∏–Ω—Ç–µ–Ω—Ç—ã';
  const endMarker = '};';
  
  const startIndex = content.indexOf(startMarker);
  if (startIndex === -1) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤');
    return false;
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ intentResponses
  let braceCount = 0;
  let endIndex = startIndex;
  let inString = false;
  let escapeNext = false;
  
  for (let i = startIndex; i < content.length; i++) {
    const char = content[i];
    
    if (escapeNext) {
      escapeNext = false;
      continue;
    }
    
    if (char === '\\') {
      escapeNext = true;
      continue;
    }
    
    if (char === '`' && !escapeNext) {
      inString = !inString;
      continue;
    }
    
    if (!inString) {
      if (char === '{') {
        braceCount++;
      } else if (char === '}') {
        braceCount--;
        if (braceCount === 0) {
          endIndex = i + 1;
          break;
        }
      }
    }
  }
  
  if (endIndex === startIndex) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤');
    return false;
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
  const newResponsesCode = generateResponsesCode();
  
  // –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫
  const beforeBlock = content.substring(0, startIndex);
  const afterBlock = content.substring(endIndex);
  
  const newContent = beforeBlock + newResponsesCode + afterBlock;
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  const backupPath = indexPath + '.backup.' + Date.now();
  fs.writeFileSync(backupPath, content);
  console.log(`üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.writeFileSync(indexPath, newContent);
  console.log('‚úÖ –§–∞–π–ª index.js –æ–±–Ω–æ–≤–ª–µ–Ω');
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON
function validateResponses() {
  const requiredIntents = ['greeting', 'events', 'circles', 'contacts', 'faq', 'ai_helper'];
  const requiredSystem = ['ai_unavailable', 'ai_processing', 'back_to_menu'];
  const requiredFallback = ['greeting', 'events', 'circles', 'contacts', 'general'];
  
  let isValid = true;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã
  requiredIntents.forEach(intent => {
    if (!responses.intents[intent]) {
      console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ–Ω—Ç: ${intent}`);
      isValid = false;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  requiredSystem.forEach(msg => {
    if (!responses.system_messages[msg]) {
      console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msg}`);
      isValid = false;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –æ—Ç–≤–µ—Ç—ã
  requiredFallback.forEach(fallback => {
    if (!responses.ai_fallback[fallback]) {
      console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç fallback –æ—Ç–≤–µ—Ç: ${fallback}`);
      isValid = false;
    }
  });
  
  if (isValid) {
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  }
  
  return isValid;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞...');
  
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º JSON
  if (!validateResponses()) {
    console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    process.exit(1);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
  if (updateMainFile()) {
    console.log('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ Cloud Functions');
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = {
  generateResponsesCode,
  updateMainFile,
  validateResponses
};
