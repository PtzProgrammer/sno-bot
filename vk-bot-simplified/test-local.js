/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è VK –±–æ—Ç–∞
 */

require('dotenv').config();
const { handler } = require('./index');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testEvent = {
  httpMethod: 'POST',
  path: '/',
  body: JSON.stringify({
    type: 'message_new',
    object: {
      message: {
        peer_id: -230721080,
        from_id: 123456789,
        text: '–ø—Ä–∏–≤–µ—Ç',
        payload: null
      }
    }
  })
};

const testContext = {};

async function runTest() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
  console.log('üìù –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', testEvent.body);
  
  try {
    const result = await handler(testEvent, testContext);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –¢–µ—Å—Ç health check
async function testHealthCheck() {
  console.log('üè• –¢–µ—Å—Ç health check...');
  
  const healthEvent = {
    httpMethod: 'GET',
    path: '/health'
  };
  
  try {
    const result = await handler(healthEvent, testContext);
    console.log('‚úÖ Health check —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
  } catch (error) {
    console.error('‚ùå Health check –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  await testHealthCheck();
  console.log('\n' + '='.repeat(50) + '\n');
  await runTest();
}

main().catch(console.error);
