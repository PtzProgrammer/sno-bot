/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cursor –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ VK –±–æ—Ç–∞
 * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–æ–±–Ω–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ Cursor
 */

const fs = require('fs');
const path = require('path');
const logger = require('./logger');

class CursorIntegration {
  constructor(options = {}) {
    this.outputDir = options.outputDir || path.join(__dirname, '../../cursor-logs');
    this.updateInterval = options.updateInterval || 5000; // 5 —Å–µ–∫—É–Ω–¥
    this.maxLogsInFile = options.maxLogsInFile || 1000;
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Cursor –ª–æ–≥–æ–≤
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }
    
    this.isRunning = false;
    this.updateTimer = null;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor
   */
  start() {
    if (this.isRunning) {
      return;
    }
    
    this.isRunning = true;
    logger.info('–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor', { outputDir: this.outputDir });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    this.createInitialFiles();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    this.updateTimer = setInterval(() => {
      this.updateCursorLogs();
    }, this.updateInterval);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    this.updateCursorLogs();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  stop() {
    if (!this.isRunning) {
      return;
    }
    
    this.isRunning = false;
    
    if (this.updateTimer) {
      clearInterval(this.updateTimer);
      this.updateTimer = null;
    }
    
    logger.info('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cursor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è Cursor
   */
  createInitialFiles() {
    const files = [
      {
        name: 'README.md',
        content: this.generateReadme()
      },
      {
        name: 'live-logs.md',
        content: this.generateLiveLogsTemplate()
      },
      {
        name: 'bot-stats.json',
        content: JSON.stringify(this.getInitialStats(), null, 2)
      },
      {
        name: 'recent-errors.md',
        content: this.generateErrorsTemplate()
      }
    ];
    
    for (const file of files) {
      const filePath = path.join(this.outputDir, file.name);
      fs.writeFileSync(filePath, file.content);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README –¥–ª—è Cursor
   */
  generateReadme() {
    return `# VK Bot Logs - Cursor Integration

## üìä –§–∞–π–ª—ã –ª–æ–≥–æ–≤

- **live-logs.md** - –ñ–∏–≤—ã–µ –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- **bot-stats.json** - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
- **recent-errors.md** - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
- **performance.md** - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

## üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

–§–∞–π–ª—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ ${this.updateInterval / 1000} —Å–µ–∫—É–Ω–¥.

## üìù –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

- **ERROR** - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
- **WARN** - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
- **INFO** - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- **DEBUG** - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **TRACE** - –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞

## üöÄ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã

- –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏: \`Ctrl+Shift+P\` ‚Üí "Developer: Reload Window"
- –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª: \`Ctrl+\`\`
- –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö: \`Ctrl+F\`

---
*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toISOString()}*
`;
  }

  /**
   * –®–∞–±–ª–æ–Ω –¥–ª—è –∂–∏–≤—ã—Ö –ª–æ–≥–æ–≤
   */
  generateLiveLogsTemplate() {
    return `# üî¥ –ñ–∏–≤—ã–µ –ª–æ–≥–∏ VK –±–æ—Ç–∞

> **–°—Ç–∞—Ç—É—Å**: –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...
> **–í—Ä–µ–º—è**: ${new Date().toLocaleString('ru-RU')}

## üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è

*–õ–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...*

---
*–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ${this.updateInterval / 1000} —Å–µ–∫—É–Ω–¥*
`;
  }

  /**
   * –®–∞–±–ª–æ–Ω –¥–ª—è –æ—à–∏–±–æ–∫
   */
  generateErrorsTemplate() {
    return `# ‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏

> **–°—Ç–∞—Ç—É—Å**: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω
> **–í—Ä–µ–º—è**: ${new Date().toLocaleString('ru-RU')}

## üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏

*–û—à–∏–±–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...*

---
*–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ${this.updateInterval / 1000} —Å–µ–∫—É–Ω–¥*
`;
  }

  /**
   * –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getInitialStats() {
    return {
      status: 'initializing',
      startTime: new Date().toISOString(),
      totalLogs: 0,
      errors: 0,
      warnings: 0,
      info: 0,
      debug: 0,
      uptime: 0,
      memory: {
        used: 0,
        total: 0,
        percentage: 0
      },
      lastUpdate: new Date().toISOString()
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–ª—è Cursor
   */
  updateCursorLogs() {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∂–∏–≤—ã–µ –ª–æ–≥–∏
      this.updateLiveLogs();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateStats();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
      this.updateErrors();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      this.updatePerformance();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ –¥–ª—è Cursor:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–≤—ã—Ö –ª–æ–≥–æ–≤
   */
  updateLiveLogs() {
    const logs = logger.exportForCursor({
      level: 'debug',
      limit: this.maxLogsInFile,
      includeMeta: true
    });
    
    let content = `# üî¥ –ñ–∏–≤—ã–µ –ª–æ–≥–∏ VK –±–æ—Ç–∞\n\n`;
    content += `> **–°—Ç–∞—Ç—É—Å**: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n`;
    content += `> **–í—Ä–µ–º—è**: ${new Date().toLocaleString('ru-RU')}\n`;
    content += `> **–í—Å–µ–≥–æ –ª–æ–≥–æ–≤**: ${logs.length}\n\n`;
    
    if (logs.length === 0) {
      content += `*–õ–æ–≥–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã...*\n\n`;
    } else {
      content += `## üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const groupedLogs = this.groupLogsByTime(logs);
      
      for (const [timeGroup, timeLogs] of Object.entries(groupedLogs)) {
        content += `### üïê ${timeGroup}\n\n`;
        
        for (const log of timeLogs.slice(-10)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
          const emoji = this.getLogEmoji(log.level);
          const time = new Date(log.timestamp).toLocaleTimeString('ru-RU');
          
          content += `**${emoji} ${time}** [${log.level.toUpperCase()}] ${log.message}\n`;
          
          if (log.meta && Object.keys(log.meta).length > 0) {
            content += `\`\`\`json\n${JSON.stringify(log.meta, null, 2)}\n\`\`\`\n`;
          }
          content += `\n`;
        }
      }
    }
    
    content += `---\n*–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ${this.updateInterval / 1000} —Å–µ–∫—É–Ω–¥*\n`;
    
    const filePath = path.join(this.outputDir, 'live-logs.md');
    fs.writeFileSync(filePath, content);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  updateStats() {
    const stats = logger.getStats();
    const memory = process.memoryUsage();
    
    const statsData = {
      status: 'running',
      startTime: new Date(Date.now() - stats.uptime * 1000).toISOString(),
      totalLogs: stats.total,
      errors: stats.byLevel.error || 0,
      warnings: stats.byLevel.warn || 0,
      info: stats.byLevel.info || 0,
      debug: stats.byLevel.debug || 0,
      trace: stats.byLevel.trace || 0,
      uptime: Math.floor(stats.uptime),
      memory: {
        used: Math.round(memory.heapUsed / 1024 / 1024),
        total: Math.round(memory.heapTotal / 1024 / 1024),
        percentage: Math.round((memory.heapUsed / memory.heapTotal) * 100)
      },
      logLevel: stats.logLevel,
      lastUpdate: new Date().toISOString(),
      recentErrors: stats.errors.slice(-5)
    };
    
    const filePath = path.join(this.outputDir, 'bot-stats.json');
    fs.writeFileSync(filePath, JSON.stringify(statsData, null, 2));
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
   */
  updateErrors() {
    const stats = logger.getStats();
    const errors = stats.errors || [];
    
    let content = `# ‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏\n\n`;
    content += `> **–°—Ç–∞—Ç—É—Å**: ${errors.length > 0 ? 'üö® –ï—Å—Ç—å –æ—à–∏–±–∫–∏' : '‚úÖ –û—à–∏–±–æ–∫ –Ω–µ—Ç'}\n`;
    content += `> **–í—Ä–µ–º—è**: ${new Date().toLocaleString('ru-RU')}\n`;
    content += `> **–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫**: ${errors.length}\n\n`;
    
    if (errors.length === 0) {
      content += `## ‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n\n`;
    } else {
      content += `## üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\n\n`;
      
      for (const error of errors.slice(-10)) { // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
        const time = new Date(error.timestamp).toLocaleString('ru-RU');
        content += `### üî¥ ${time}\n\n`;
        content += `**–°–æ–æ–±—â–µ–Ω–∏–µ**: ${error.message}\n\n`;
        
        if (error.meta) {
          content += `**–î–µ—Ç–∞–ª–∏**:\n`;
          content += `\`\`\`json\n${JSON.stringify(error.meta, null, 2)}\n\`\`\`\n\n`;
        }
      }
    }
    
    content += `---\n*–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ${this.updateInterval / 1000} —Å–µ–∫—É–Ω–¥*\n`;
    
    const filePath = path.join(this.outputDir, 'recent-errors.md');
    fs.writeFileSync(filePath, content);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  updatePerformance() {
    const memory = process.memoryUsage();
    const uptime = process.uptime();
    
    let content = `# üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n`;
    content += `> **–í—Ä–µ–º—è**: ${new Date().toLocaleString('ru-RU')}\n`;
    content += `> **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã**: ${Math.floor(uptime / 3600)}—á ${Math.floor((uptime % 3600) / 60)}–º\n\n`;
    
    content += `## üíæ –ü–∞–º—è—Ç—å\n\n`;
    content += `- **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ**: ${Math.round(memory.heapUsed / 1024 / 1024)} MB\n`;
    content += `- **–í—Å–µ–≥–æ**: ${Math.round(memory.heapTotal / 1024 / 1024)} MB\n`;
    content += `- **–ü—Ä–æ—Ü–µ–Ω—Ç**: ${Math.round((memory.heapUsed / memory.heapTotal) * 100)}%\n\n`;
    
    content += `## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤\n\n`;
    const stats = logger.getStats();
    content += `- **–í—Å–µ–≥–æ –ª–æ–≥–æ–≤**: ${stats.total}\n`;
    content += `- **–û—à–∏–±–∫–∏**: ${stats.byLevel.error || 0}\n`;
    content += `- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è**: ${stats.byLevel.warn || 0}\n`;
    content += `- **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**: ${stats.byLevel.info || 0}\n`;
    content += `- **–û—Ç–ª–∞–¥–∫–∞**: ${stats.byLevel.debug || 0}\n\n`;
    
    content += `## üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º\n\n`;
    if (stats.byHour) {
      const sortedHours = Object.entries(stats.byHour)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5);
      
      for (const [hour, count] of sortedHours) {
        content += `- **${hour}:00** - ${count} –ª–æ–≥–æ–≤\n`;
      }
    }
    
    content += `\n---\n*–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ${this.updateInterval / 1000} —Å–µ–∫—É–Ω–¥*\n`;
    
    const filePath = path.join(this.outputDir, 'performance.md');
    fs.writeFileSync(filePath, content);
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
   */
  groupLogsByTime(logs) {
    const groups = {};
    
    for (const log of logs) {
      const date = new Date(log.timestamp);
      const timeGroup = date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      if (!groups[timeGroup]) {
        groups[timeGroup] = [];
      }
      groups[timeGroup].push(log);
    }
    
    return groups;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞
   */
  getLogEmoji(level) {
    const emojis = {
      error: 'üî¥',
      warn: 'üü°',
      info: 'üîµ',
      debug: 'üü£',
      trace: '‚ö™'
    };
    return emojis[level] || '‚ö™';
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  createLogDump() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const dumpFile = path.join(this.outputDir, `log-dump-${timestamp}.json`);
    
    const dump = {
      timestamp: new Date().toISOString(),
      stats: logger.getStats(),
      logs: logger.exportForCursor({
        level: 'debug',
        limit: 5000,
        includeMeta: true
      }),
      system: {
        nodeVersion: process.version,
        platform: process.platform,
        arch: process.arch,
        uptime: process.uptime(),
        memory: process.memoryUsage()
      }
    };
    
    fs.writeFileSync(dumpFile, JSON.stringify(dump, null, 2));
    logger.info('–°–æ–∑–¥–∞–Ω –¥–∞–º–ø –ª–æ–≥–æ–≤', { file: dumpFile });
    
    return dumpFile;
  }
}

module.exports = CursorIntegration;
